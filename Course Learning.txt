    ============= The Repository Pattern - Consequences ==============

== Increased Level of Abstraction.

== Increased Maintainablility, Flexibility,Testability.

== More Classes / Interfaces - less Duplicate Code .

== Business Logic further away from the data.

== Harder to Optmize certain Operations againist the data source.


============================ New Learnings =============================

== In Our Startup Class, we Have two functions..
   
== First is ConfigureService. In this function we actually register the services.

== Ordering to add new services in this function does't matter.

== Second is Configure.

==  in this Function when we want to add new middleware then order of writing

   middleware is very important !!!


====  Three Methods for Register a new Service..

1- Add Transient and this one is instantiated for a individual method and not
 the request itself. it's got a very short lifetime the repository will be created
 and the destroyed just upon using an individual method, and that's too short.
 
2- Add a Singleton, by the use of this options the service would be created the 
 first time we use it when the application starts and the method goes to controller
and created a new instance of the repository but then it would never be destroyed
 until the application shuts down and that's too long.

3- Add a Scoped , this one is the Correct Option, and this is the one that we will
 use for almost everything.


- So It's gonna be created when the HTTP Request comes into our API Creates
a new Instance in the Controller, the Controller sees that it needs a repository
So it Creates the instance of Repository.
and when the request is finished then it disposes of both the controller and 
the repository.

And We Don't ourselves need to worry about disposing of the resources created

when a request comes Because of these life cycles.



==================== Why We Use LoggerFactory in .NET Core ====================
= logs have been an essential part of troubleshooting application 
 and infrastructure performance.

=  Log data contains information such as out of memory exception
   or hard disk errors .
== This feature we deployed last week was working fine till yesterday now 

 I have no idea why is it not working!" This is like a typical sentence you 

hear from developers when there is no logging in place. It can be to a great 

extent solved by having automated tests, still having logging and monitoring 

gives you a different viewpoint. In this post, I am going to reveal the 

importance of having logs for your code and monitoring your code to cut

 down the firefighting time for bugs and errors by huge margins.


== Generally, developers don't write any code that logs meaningful 

 and relevant messages for the feature they are writing. Writing code

 to log things may even be considered not essential and a waste of time 

by developers who work in small projects. Which might be true to some point 

but the benefits surely outweigh the cost.


== The solution is simple, make logs and writing code to do logging first

 class citizen in your code base. Logs are the medium through which your

 app speaks to you. Logging is the foundation for solving your operational 

problems so not having them is being in a communication void with your 

application.


== As an example, if you create a user, just log that the user has been 

created successfully and if the user could not be created because of 

let's say a database exception it is even more important to log the reason

 behind the unsuccessful operation.


===============================================================================

---------------- API Generic Repository ----------------------------------

-- It is very easy to register a service and their relevant repository which

   implements that specific repository.

-- but in case of Generic Repository , First of all we also need to add this to

   our service container so that we can inject less wherever in our program.

-- The Way that we add this is slightly different from this Because in this
 
   case we don't know the types that we are going to be using with this 
 
   repository at this time.
            services.AddScoped(typeof(IGenericRepository<>),typeof(GenericRepository<>));


--- .NET Core — Using the Specification pattern alongside a generic Repository---

-- The Repository and Unit of Work pattern are intended to create an abstraction layer 

between the business logic layer and the data access layer of an application.


------------------------- The Specification pattern ----------------------------

-The Specification pattern allows us to encapsulate some piece of domain knowledge
 
 into a single unit (the specification) and reuse it in different parts of the code base.

- It provides us a good solution to the problem of where to place the querying, sorting and

  paging logic since it describes a query in an object.

- Why and how we should mix them?

== In a large application with many domain objects and many possible queries, 
 
the Repository pattern reduces the amount of code needed to deal with all the

 querying that is needed. Adding to this, a generic Repository promotes the 

Specification pattern, which encapsulates the query to be performed in a pure
 
 object-oriented way. We can simply write code purely in terms of object and 
 
  put SQL in the background.

-- For example, to encapsulate a paged query that searches for recipes and need 
  
 
to include the users that have made such recipes, we can create a SearchRecipesWithUsers 

specification which would take any parameters we need and have the overloads — allow a 

class to have more than one method having the same name, if their argument lists are 

different — we wish. The generic Repository would have a method that receives a specification 

as an argument and would be able to return the expected result according to the provided specification.

========================== Conclusion ======================================

== Using the Specification pattern with the Unit Of Work/Repository pattern provides us with a very modular 

  code, keeping our code organized and making it easy to add more complexity as the application grows.

== As said, there is no silver bullet when coding or architecting an application, but I consider this 
   approach as a good practice.


== Describes a query in an Object.

== Returns an IQuerable<T>

== Generic List method takes Specification as Paramerter.

== Specification Can  Have Meaningful Name.

 LIke , ProductsWithTypesBrandsSpecification

===================  What is AutoMapper?

== AutoMapper is a simple library that helps us to transform one object type

 to another. It is a convention-based object-to-object mapper that requires

 very little configuration. 

The object-to-object mapping works by transforming an input object of one type

 into an output object of a different type.


== Profiles
A good way to organize our mapping configurations is with Profiles. We need to 

create classes that inherit from Profile class and put the configuration in the

 constructor: 

== our application starts and initializes AutoMapper, AutoMapper will scan our application

 and look for classes that inherit from the Profile class and load their mapping configurations.


=========================== API Error Handling =================================

= Error Handling and Exceptions 
=   Developer Exception Page

= Validations Errors

= Http reposne errrs

= Customising the Errors

= Middle 

= Swagger

= 1XX Codes: Informational codes. Rarely used in modern web apps.

= 2XX Codes: Success codes. Tells the client that the request succeeded.

= 3XX Codes: Redirect codes. Tells the client that they may need to redirect to another location.

= 4XX Codes: Client Error codes. Tells the client that something was wrong with what it sent to the server.

= 400 range Client Error (Pass Some Bad Data, Not Follow Validations)

= 401 range means UnAuthorized

= 404 range means Not Found

= 5XX Codes: Server Error codes. Tells the client that something went wrong on the server's side, so that
  the client may attempt the request again, possibly at a later time.


===================== Front End Framework =====================================

To install Angular on your local system, you need the following:

Node.js

Angular requires a current, active LTS, or maintenance LTS version of Node.js.


== If you are unsure what version of Node.js runs on your system, run node -v in a terminal window.


== npm package manager

Angular, the Angular CLI, and Angular applications depend on npm packages for many features and functions.

 To download and install npm packages, you need an npm package manager. This guide uses the npm client command 

line interface, which is installed with Node.js by default. To check that you have the npm client installed, 

run npm -v in a terminal window.


======= Why We Need to Install Angular CLI ====================

== You use the Angular CLI to create projects, generate application 

and library code, and perform a variety of ongoing development tasks 
 such as testing, bundling, and deployment.

== Useful Commands 

=  node -v to check Installed Node Version

= npm -v to check install npm version

= npm install -g @angular/cli

= ng --version to check installed version of Angualar


================================= Angualr WorkSpace ============================

== ng new ( Your Angualr Applcaation Name) 

== The Angular CLI installs the necessary Angular npm packages and other dependencies. 




========================= Add Bootstrap and Fontawesome ========================

== Is it good to use a jquery library inside an angular 8 Project??????

No, it is not a good idea. You are using jQuery coding practices in 

an Angular app and this will cause you headaches - for once because 

those practices go against the Angular spirit, and also because you 

don't reap the benefits of Angular.

== You can do everything you do with jquery with angular like DOM changes 

, listen to event component event or windows event , create dynamic html 

elemnt and angular will track all these kind of change and your app doesn't

 have any side effect for example select elment value changes and angular

 haven't got this kind of changes.



=== we Will Avoid to use JQuery in our Angular Application, That's y We Are

using ngx-bootstrap not Bootstrap that contains many Jquery Plugins.


==== What is ngx-Bootstrap ??????


== ngx-bootstrap contains all core (and not only) Bootstrap components

 powered by Angular. So you don't need to include original JS components,

 but we are using markup and css provided by Bootstrap.


============= Angular Basics ======================================


==================== Goal of this Section ===============================

== To be Able to use the HTTP cliet to retrieve data from

 the API.

== To Understand the basics of "Observeables" and Typescript.


== Always try to Use this Command to Create a New Command.

== ng g c componentName --skip-tests


============ Rules of Coding in Angular From Expertise =======================

== Always use Reactive Forms For Any Type of Data Binding 

== Always Use Interface to get the property type.

== Always Bind Data in Object to send on Web Api / Try to abvoid Send Data on Web
Api Using Parameters.

== Use Camel Notation to Write Clean Code In Angular.

== Use Child View For Dom Manipluation.



========================== Components Interaction ============================


========================== Services In Angular ===============================


== Need Of Creating Services in Angular is Base on Some Good Programming 
principles.


==1st Prinicple == Do Not Repeat Yourself (DRY)

== 2nd Principle == Single Responsibilty Principle.
Means, A Component class should have only one Responsibilty,

component class Responsibilty to control the html view logic.

not should create the data for the Html View Logic.

=== Xo What's Exactly the Solution for this Principle.

== The Good and Better Optimize solution for this is "Service".


=============== But Wht Actually the service is??? =========================== 

== A Service is a class with a specific Purpose.

== Why We need to use Service ??

== To Share Data Between Multiple Components.

== Implement Application Logic.

== External Interaction.


=== How do we Use Services OR How Angular Allows Us To Create and Use Services

    in Angular ??


==  Angular allows us to use Services with the way of Dependency Injection.

== we will Learn about DI in Three Parts.

== Code without DI - drawback.

== DI as a Design Pattern.

== DI as a Framework.


=========  Code without DI (First Part)

== DI Image

========== DI as a Design Pattern =========


== DI is a coding pattern in which a class receives its dependencies from
 external sources rather than creating them itself.

== it's Ok that u r following DI and a class receives its dependies from
exteral sources. 

== but if the number of dependencies is greater then a specific limit, then

in this Way Angular DI Framework comes to solve this kind of Problem.

-- DI is a Mechanisam where we inject services rather than creating
using new keyword, decoupled service, change at one place and see effect 
on many changes in one place.

================== HTTP & Observables =======================================

== A sequence of items that arrive asynchronously over time.

== HTTP Call - Single item

== Single item - HTTP Response


-------------------------- Introduction To TypeScript ------------------------

========================= Declarations & Annotations ========================

-- Typescript is Strongly Type Language, xo we have a advantage that by using
   typescript is that, it will automatically identify the data type.

    var x = 10; // this is simple called Type Infrence. 
    var y = "Hamza";
    var z= true;

--  var a:number = 10; (:number) is Called Annotations. and this way is called
  Declarations with Annotations.
-- Remenber one thing is that, Initialization is Not Mandatory.

-- Always Try to Use Annotations with Variables Declarations.


-- TS Introducs a New DataType Called "any".
-- By Using "any" Datatype refers that there is no any compile time checkng.


------------------------------ Enumerations ---------------------------------

== enum type are simple used to give friendlier names to numeric values, and 
create a specific type of a variable. 


===================== Wht is the Need of Interface ? ==========================

== Interfaces are the most flexible way to describing types in Ts. Bcz
 type information is erased from a typescript program when we compile it,xo
 we don't have to worry abour the runtime overhead, we are going to add when 
using interfaces.


=== In which case we prefer to use a class instead of Interface ===============

-- A class provides an opportunity to initialize the values when we create a 
 new instance of it.

-- When we use interface it allows only to declaration to the proerties, instead
of initialization of the proerties.



==================== Routing & Navigation =====================================


=================== Angular Professional Training =============================

--Directives help you to attach behaviour in the HTML DOM.


-- Structural Directives ---

-- Change the DOM Layout by Adding and Removing elements.
 
For Example :
 ngIf
 ngFor
 ngSwitch


 ------ Attribute Directives ------

-- Change the appearance and behaviour of HTML elements.
[hidden]
[disabled]


---- Component Directives -----

 Directoves with templates. it's like  a user control. 



============== Lazy Loading ===================================

-- Lazy Loading means on demand Loading.

-- Lazy Loading Concept is related to the routing concept.

-- if we want lazy loading in our project then we must divide our 
   project into the seperate seperate modules.

-- Lazy Loading in One Line ( Don't Load something which you don't need.

-- Lazy loading is a design pattern commonly used in computer programming to
  defer initialization of an object until the point at which it is needed.
-- It can contribute to efficiency in the program’s operation if properly and 
 appropriately used.

= Question How does lazy loading of Routes improve performance in Angular app?
-- A Large scale application will contain lots of feature modules whcich need
   not to be loaded all at once.
-- The feature modules can be loaded asynchronously after the app has loaded
   eitehr on demand or using different strategies.
-- Reducing the size of bundle when the app loads initially improves the app
  load times thus improving user experience.
 

===================== Loading Indicators =====================================

Q) Why we need loading indicators in our SPA Application??

Ans: We need loading indicator in that case in which the app is waitng for 
    data from the API.

====================== ViewChild & ViewChildren =====================


The @ViewChild and @ViewChildren decorators in Angular provide a way to access
 and manipulate DOM elements, directives and components.


================== Module 13 (Basket) =============================

-- In-memory data structure store.
-- Suports strings,hashes,lists,sets,etc.
-- Key/Value Store.
-- Fast
-- Persists data by using snapshots every minute.
-- Data can be given time to live.
-- Great for caching data.
-- Global storage,Persistance Storage,Redis
-- Redis ( Remote Directory Server )
      Benefits of Redis



======================= Identity =============================================

-- Add References in Difference Projects
 
 (Infrastructure)
 - Microsoft.AspNetCore.Identity
 - Microsoft.AspNetCore.Identity.EntityFrameworkCore
 - System.IdentityModels.Tokens
 - System.IdentityModels.Jwt

 (API)
 - Microsoft.AspNetCore.Authentication.JwtBearer

 (Core)
- Microsoft.Extensions.Identity.Stores 



Add-Migration InitialCreate -Context AppIdentityDbContext

Update-Database -Context AppIdentityDbContext



=================== Angualr Forms ====================================

 -- FormsModule--                  ---ReactiveFormsModule
   (Template-driven)                   (Reactive)
  
***** TDF Features ****                   ****** Reactive Forms Featires *****

= Easy to Use                              = More Flexible
= Good for simple scenarious.              = Good for any scenerio
= Two Way Binding (uses ngModel).          = Immutable data model 
= Minimal component code.                  = More Component code/less markup
= Automatic tracking by angular.           = Reactive transformations
= Testing is Hard.                         = Testing is Easier


***************** Building blocks of forms *********************************

--- (FormControl)

the form control is going to be attached to html form inputs.
 (formControl) itself a class inside is the class which has four thngs.
  - Value
  - Validation Status
  - User Interactions
  - Events  

--- (FormGroup)

A Form Group is collection of form controls.

--- (FormArray)  
 